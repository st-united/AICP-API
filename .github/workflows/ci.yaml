name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, uat]
  pull_request:
    branches: [main, develop, uat]

env:
  PROJECT_ID: enspara
  REGION: asia-southeast1
  REPOSITORY: aicp
  IMAGE_NAME: aicp-api
  DEV_NAMESPACE: devplus-aicp-dev
  UAT_NAMESPACE: devplus-aicp-uat
  PROD_NAMESPACE: devplus-aicp

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm' # Change from 'yarn' to 'npm'

      - name: Install Yarn
        run: npm install -g yarn

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run linting
        run: yarn lint

      - name: Run type checking
        run: yarn type-check || echo "No type checking configured"

      - name: Run tests
        run: yarn test || echo "No tests configured"

      - name: Build application
        run: yarn build || echo "No build step configured"

  build-and-deploy-dev:
    if: github.ref == 'refs/heads/develop'
    needs: test
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Generate version tag
        id: version
        run: |
          VERSION=dev-$(date +%Y%m%d)-$(git rev-parse --short HEAD)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "FULL_IMAGE_NAME=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.version.outputs.FULL_IMAGE_NAME }}
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:dev-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to GKE Dev
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_DEV }} --zone ${{ env.REGION }}-a --project ${{ env.PROJECT_ID }}

          # Install kustomize if not available
          if ! command -v kustomize &> /dev/null; then
            curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
            sudo mv kustomize /usr/local/bin/
          fi

          cd k8s/services-dev
          kustomize edit set image asia-southeast1-docker.pkg.dev/enspara/aicp/aicp-api=${{ steps.version.outputs.FULL_IMAGE_NAME }}
          kubectl apply -k .

          # Wait for deployment to complete
          kubectl rollout status statefulset/aicp-api -n ${{ env.DEV_NAMESPACE }} --timeout=600s

          # Verify deployment
          kubectl get pods -n ${{ env.DEV_NAMESPACE }} -l app=aicp-api

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Development deployment successful!"
            echo "Image: ${{ steps.version.outputs.FULL_IMAGE_NAME }}"
          else
            echo "❌ Development deployment failed!"
          fi

  build-and-deploy-prod:
    if: github.ref == 'refs/heads/main'
    needs: test
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Generate version tag
        id: version
        run: |
          VERSION=$(date +%Y%m%d.%H%M%S)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "FULL_IMAGE_NAME=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.version.outputs.FULL_IMAGE_NAME }}
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to GKE Production
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_PROD }} --zone ${{ env.REGION }}-a --project ${{ env.PROJECT_ID }}

          # Install kustomize if not available
          if ! command -v kustomize &> /dev/null; then
            curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
            sudo mv kustomize /usr/local/bin/
          fi

          cd k8s/services
          kustomize edit set image asia-southeast1-docker.pkg.dev/enspara/aicp/aicp-api=${{ steps.version.outputs.FULL_IMAGE_NAME }}
          kubectl apply -k .

          # Wait for deployment to complete
          kubectl rollout status statefulset/aicp-api -n ${{ env.PROD_NAMESPACE }} --timeout=600s

          # Verify deployment
          kubectl get pods -n ${{ env.PROD_NAMESPACE }} -l app=aicp-api

      - name: Health check
        run: |
          # Wait a bit for the service to be ready
          sleep 30

          # Get the service endpoint and do a health check
          kubectl get svc -n ${{ env.PROD_NAMESPACE }}

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Production deployment successful!"
            echo "Image: ${{ steps.version.outputs.FULL_IMAGE_NAME }}"
          else
            echo "❌ Production deployment failed!"
          fi

  build-and-deploy-uat:
    if: github.ref == 'refs/heads/uat'
    needs: test
    runs-on: ubuntu-latest
    environment: uat
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configure Docker for Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: 'gke-gcloud-auth-plugin'

      - name: Install kubectl
        run: |
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl

      - name: Generate version tag
        id: version
        run: |
          VERSION=uat-$(date +%Y%m%d)-$(git rev-parse --short HEAD)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "FULL_IMAGE_NAME=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:$VERSION" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.version.outputs.FULL_IMAGE_NAME }}
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/${{ env.IMAGE_NAME }}:uat-latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Deploy to GKE UAT
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_UAT }} --zone ${{ env.REGION }}-a --project ${{ env.PROJECT_ID }}

          # Install kustomize if not available
          if ! command -v kustomize &> /dev/null; then
            curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
            sudo mv kustomize /usr/local/bin/
          fi

          cd k8s/services-uat
          kustomize edit set image asia-southeast1-docker.pkg.dev/enspara/aicp/aicp-api=${{ steps.version.outputs.FULL_IMAGE_NAME }}
          kubectl apply -k .

          # Wait for deployment to complete
          kubectl rollout status statefulset/aicp-api -n ${{ env.UAT_NAMESPACE }} --timeout=600s

          # Verify deployment
          kubectl get pods -n ${{ env.UAT_NAMESPACE }} -l app=aicp-api

      - name: Health check
        run: |
          # Wait a bit for the service to be ready
          sleep 30

          # Get the service endpoint and do a health check
          kubectl get svc -n ${{ env.PROD_NAMESPACE }}

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ UAT deployment successful!"
            echo "Image: ${{ steps.version.outputs.FULL_IMAGE_NAME }}"
          else
            echo "❌ UAT deployment failed!"
          fi

  # Optional: Rollback job for production
  rollback-prod:
    if: failure() && github.ref == 'refs/heads/main'
    needs: build-and-deploy-prod
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Rollback Production Deployment
        run: |
          gcloud container clusters get-credentials ${{ secrets.GKE_CLUSTER_PROD }} --zone ${{ env.REGION }}-a --project ${{ env.PROJECT_ID }}
          kubectl rollout undo statefulset/aicp-api -n ${{ env.PROD_NAMESPACE }}
          kubectl rollout status statefulset/aicp-api -n ${{ env.PROD_NAMESPACE }} --timeout=600s
          echo "🔄 Production rollback completed"

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phoneNumber  String    @unique @map("phone_number") @db.VarChar
  email        String    @unique @db.VarChar
  password     String    @db.VarChar
  fullName     String    @map("full_name") @db.VarChar
  avatarUrl    String?   @map("avatar_url") @db.Text
  provider     String?   @db.VarChar
  status       Boolean   @default(false)
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt    DateTime? @map("deleted_at") @db.Timestamptz(6)
  refreshToken String?   @unique @map("refresh_token") @db.VarChar

  dob          DateTime? @map("dob") @db.Timestamptz(6) 
  country      String?   @db.VarChar                     
  province     String?   @db.VarChar                      
  job          String?   @db.VarChar                      
  referralCode String?   @unique @map("referral_code") @db.VarChar

  roles          UserRole[]
  userAnswer     UserAnswer[]
  exam           Exam[]
  mentor         Mentor[]
  mentor_booking MentorBooking[]
}

model Role {
  id                 String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String   @unique
  description        String?  @db.Text
  isOrganizationRole Boolean  @default(false) @map("is_organization_role")
  createdAt          DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  users       UserRole[]
  permissions RolePermission[]
}

model Permission {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar
  description String?  @db.Text
  slug        String?  @db.VarChar
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  roles RolePermission[]
}

model UserRole {
  userId    String   @map("user_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String   @map("role_id") @db.Uuid
  permissionId String   @map("permission_id") @db.Uuid
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model Question {
  id              String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type            QuestionType    @default(SINGLE_CHOICE)
  content         String          @db.Text
  subcontent      String?         @db.Text
  image           String?         @db.Text
  sequence        Int?            @db.SmallInt
  parentId        String?         @map("parent_id") @db.Uuid
  criteriaId      String?         @db.Uuid
  difficultyLevel DifficultyLevel @default(L1) @map("difficulty_level")
  createdAt       DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime        @updatedAt @map("updated_at") @db.Timestamptz(6)

  category        QuestionCategory[]
  answerOptions   AnswerOption[]
  userAnswers     UserAnswer[]
  criteria        Criteria?          @relation(fields: [criteriaId], references: [id], onDelete: Cascade)
  examSetQuestion ExamSetQuestion[]
}

model Category {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar
  description String   @db.Text
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  questions        QuestionCategory[]
  courses          Course[]
  criteriaCategory CriteriaCategory[]
  categoryDomain   CategoryDomain[]
}

model QuestionCategory {
  questionId String   @map("question_id") @db.Uuid
  categoryId String   @map("category_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([questionId, categoryId])
}

model Course {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title       String   @db.VarChar
  description String   @db.Text
  provider    String   @db.VarChar
  url         String   @db.Text
  categoryId  String   @map("category_id") @db.Uuid
  domainId    String?  @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  domain   Domain?  @relation(fields: [domainId], references: [id], onDelete: Cascade)
}

model AnswerOption {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String   @db.Text
  isCorrect  Boolean  @map("is_correct")
  questionId String   @map("question_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  question   Question              @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selections UserAnswerSelection[]
}

model UserAnswer {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  answerText  String   @map("answer_text") @db.Text
  manualScore Int?     @map("manual_score") @db.SmallInt
  autoScore   Int?     @map("auto_score") @db.SmallInt
  questionId  String   @map("question_id") @db.Uuid
  userId      String   @map("user_id") @db.Uuid
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  question   Question              @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  selections UserAnswerSelection[]
}

model UserAnswerSelection {
  answerOptionId String   @map("answer_option_id") @db.Uuid
  userAnswerId   String   @map("user_answer_id") @db.Uuid
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  answerOption AnswerOption @relation(fields: [answerOptionId], references: [id], onDelete: Cascade)
  userAnswer   UserAnswer   @relation(fields: [userAnswerId], references: [id], onDelete: Cascade)

  @@id([userAnswerId, answerOptionId])
}

model Criteria {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar
  description String?  @db.Text
  scoreWeight Float    @map("score_weight") @db.Real
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  questions  Question[]
  categories CriteriaCategory[]
}

model CriteriaCategory {
  criteriaId String   @map("criteria_id") @db.Uuid
  categoryId String   @map("category_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  criteria Criteria @relation(fields: [criteriaId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([categoryId, criteriaId])
}

model Domain {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @unique @db.VarChar
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  courses    Course[]
  categories CategoryDomain[]
}

model CategoryDomain {
  domainId   String   @map("domain_id") @db.Uuid
  categoryId String   @map("category_id") @db.Uuid
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  domain   Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([categoryId, domainId])
}

model ExamSet {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String   @db.VarChar
  description String?  @db.Text
  createdAt   DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  exams     Exam[]
  questions ExamSetQuestion[]
}

model Exam {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId     String    @map("user_id") @db.Uuid
  examSetId  String?   @map("exam_set_id") @db.Uuid
  startedAt  DateTime? @map("started_at") @db.Timestamptz(6)
  finishedAt DateTime? @map("finished_at") @db.Timestamptz(6)
  totalScore Float?    @map("total_score") @db.Real
  createdAt  DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  examSet ExamSet? @relation(fields: [examSetId], references: [id], onDelete: Cascade)
}

model ExamSetQuestion {
  questionId String   @map("question_id") @db.Uuid
  examSetId  String   @map("exam_set_id") @db.Uuid
  orderIndex Int      @map("order_index") @db.SmallInt
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  question Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  examSet  ExamSet  @relation(fields: [examSetId], references: [id], onDelete: Cascade)

  @@id([examSetId, questionId])
}

model Mentor {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId    String   @unique @map("user_id") @db.Uuid
  expertise String?  @db.VarChar
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings MentorBooking[]
}

model MentorBooking {
  id          String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String              @map("user_id") @db.Uuid
  mentorId    String              @map("mentor_id") @db.Uuid
  scheduledAt DateTime            @map("scheduled_at") @db.Timestamptz(6)
  status      MentorBookingStatus @default(PENDING)
  notes       String?             @db.Text
  createdAt   DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime            @updatedAt @map("updated_at") @db.Timestamptz(6)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  mentor Mentor @relation(fields: [mentorId], references: [id], onDelete: Cascade)
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
  ESSAY
}

enum DifficultyLevel {
  L1
  L2
  L3
  L4
  L5
  L6
  L7
}

enum MentorBookingStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
  COMPLETED
}

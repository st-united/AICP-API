generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  phoneNumber        String?                @unique @map("phone_number") @db.VarChar
  email              String                 @unique @db.VarChar
  password           String                 @db.VarChar
  fullName           String                 @map("full_name") @db.VarChar
  avatarUrl          String?                @map("avatar_url")
  provider           String?                @db.VarChar
  status             Boolean                @default(false)
  createdAt          DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime               @updatedAt @map("updated_at") @db.Timestamptz(6)
  deletedAt          DateTime?              @map("deleted_at") @db.Timestamptz(6)
  refreshToken       String?                @unique @map("refresh_token") @db.VarChar
  country            String?                @db.VarChar
  dob                DateTime?              @map("dob") @db.Timestamptz(6)
  province           String?                @db.VarChar
  referralCode       String?                @unique @map("referral_code") @db.VarChar
  languagePreference String?                @default("en") @map("language_preference") @db.VarChar
  position           String?                @db.VarChar
  timezone           String?                @default("UTC") @db.VarChar
  zaloVerified       Boolean                @default(false) @map("zalo_verified")
  statusTracking     UserTrackingStatus     @default(REGISTERED)
  isStudent          Boolean?               @map("is_student")
  studentCode        String?                @map("student_code") @db.VarChar
  university         String?                @db.VarChar
  assessorAssessment CompetencyAssessment[] @relation("AssessorAssessment")
  userAssessment     CompetencyAssessment[] @relation("UserAssessment")
  reviewerExam       Exam[]                 @relation("ReviewerExam")
  userExam           Exam[]                 @relation("UserExam")
  learningPath       LearningPath[]
  mentor             Mentor?
  userPortfolio      Portfolio?             @relation("UserPortfolio")
  verifierPortfolio  Portfolio[]            @relation("VerifierPortfolio")
  userAnswer         UserAnswer[]
  userProgress       UserLearningProgress[]
  roles              UserRole[]
  job                Domain[]               @relation("UserDomain")
}

model Role {
  id                 String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name               String           @unique
  description        String?
  isOrganizationRole Boolean          @default(false) @map("is_organization_role")
  createdAt          DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  permissions        RolePermission[]
  users              UserRole[]
}

model Permission {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String           @unique @db.VarChar
  description String?
  slug        String?          @db.VarChar
  createdAt   DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  roles       RolePermission[]
}

model UserRole {
  userId    String   @map("user_id") @db.Uuid
  roleId    String   @map("role_id") @db.Uuid
  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model RolePermission {
  roleId       String     @map("role_id") @db.Uuid
  permissionId String     @map("permission_id") @db.Uuid
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime   @updatedAt @map("updated_at") @db.Timestamptz(6)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
}

model Question {
  id                   String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type                 QuestionType      @default(SINGLE_CHOICE)
  content              String
  subcontent           String?
  image                String?
  sequence             Int?              @db.SmallInt
  parentId             String?           @map("parent_id") @db.Uuid
  createdAt            DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  levelId              String            @map("level_id") @db.Uuid
  avgScore             Decimal?          @default(0) @map("avg_score") @db.Decimal(3, 2)
  cognitiveLoad        CognitiveLoad?    @default(MEDIUM) @map("cognitive_load")
  competencySkillId    String            @map("competency_skill_id") @db.Uuid
  completionRate       Decimal?          @default(0) @map("completion_rate") @db.Decimal(3, 2)
  difficultyWeight     Int               @default(1) @map("difficulty_weight") @db.SmallInt
  discriminationIndex  Decimal?          @default(0) @map("discrimination_index") @db.Decimal(3, 2)
  estimatedTimeMinutes Int?              @default(2) @map("estimated_time_minutes") @db.SmallInt
  industryContext      String?           @default("GENERAL") @map("industry_context") @db.VarChar
  isActive             Boolean           @default(true) @map("is_active")
  lastAnalyzed         DateTime?         @map("last_analyzed") @db.Timestamptz(6)
  scenarioBased        Boolean           @default(false) @map("scenario_based")
  maxPossibleScore     Decimal           @map("max_possible_score") @db.Decimal(5, 2)
  answerOptions        AnswerOption[]
  examSetQuestion      ExamSetQuestion[]
  skill                CompetencySkill   @relation(fields: [competencySkillId], references: [id], onDelete: Cascade)
  level                Level             @relation(fields: [levelId], references: [id], onDelete: Cascade)
  parent               Question?         @relation("QuestionToSub", fields: [parentId], references: [id])
  subQuestions         Question[]        @relation("QuestionToSub")
  userAnswers          UserAnswer[]
}

model Level {
  id           String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String     @unique @db.VarChar
  description  String
  createdAt    DateTime   @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime   @updatedAt @map("updated_at") @db.Timestamptz(6)
  numericValue Int        @map("numeric_value") @db.SmallInt
  sfiaLevel    SFIALevel  @map("sfia_level")
  question     Question[]
}

model Course {
  id                 String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title              String                 @db.VarChar
  description        String
  provider           String                 @db.VarChar
  url                String
  domainId           String?                @db.Uuid
  createdAt          DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime               @updatedAt @map("updated_at") @db.Timestamptz(6)
  courseType         String?                @default("ONLINE") @map("course_type") @db.VarChar
  difficultyLevel    SFIALevel?             @map("difficulty_level")
  durationHours      Int?                   @map("duration_hours") @db.SmallInt
  isActive           Boolean                @default(true) @map("is_active")
  aspectId           String                 @map("aspect_id") @db.Uuid
  linkImage          String?
  sfiaLevels         SFIALevel[]            @map("sfia_level")
  competencyAspect   CompetencyAspect       @relation(fields: [aspectId], references: [id], onDelete: Cascade)
  domain             Domain?                @relation(fields: [domainId], references: [id])
  learningPathCourse LearningPathCourse[]
  userProgress       UserLearningProgress[]
}

model AnswerOption {
  id          String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content     String
  isCorrect   Boolean               @map("is_correct")
  questionId  String                @map("question_id") @db.Uuid
  createdAt   DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime              @updatedAt @map("updated_at") @db.Timestamptz(6)
  explanation String?
  orderIndex  Int                   @default(0) @map("order_index") @db.SmallInt
  question    Question              @relation(fields: [questionId], references: [id], onDelete: Cascade)
  selections  UserAnswerSelection[]
}

model UserAnswer {
  id               String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  answerText       String?               @map("answer_text")
  manualScore      Decimal?              @map("manual_score") @db.Decimal(5, 2)
  autoScore        Decimal?              @map("auto_score") @db.Decimal(5, 2)
  questionId       String                @map("question_id") @db.Uuid
  userId           String                @map("user_id") @db.Uuid
  createdAt        DateTime              @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime              @updatedAt @map("updated_at") @db.Timestamptz(6)
  status           UserAnswerStatus      @default(DRAFT)
  attemptCount     Int?                  @default(1) @map("attempt_count") @db.SmallInt
  confidenceLevel  Int?                  @map("confidence_level") @db.SmallInt
  examId           String                @map("exam_id") @db.Uuid
  finalScore       Decimal?              @map("final_score") @db.Decimal(5, 2)
  rawScore         Decimal?              @default(0) @map("raw_score") @db.Decimal(5, 2)
  scorePercentage  Decimal?              @default(0) @map("score_percentage") @db.Decimal(3, 2)
  timeSpentSeconds Int?                  @map("time_spent_seconds") @db.SmallInt
  exam             Exam                  @relation(fields: [examId], references: [id], onDelete: Cascade)
  question         Question              @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  selections       UserAnswerSelection[]
}

model UserAnswerSelection {
  answerOptionId String       @map("answer_option_id") @db.Uuid
  userAnswerId   String       @map("user_answer_id") @db.Uuid
  createdAt      DateTime     @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime     @updatedAt @map("updated_at") @db.Timestamptz(6)
  answers        AnswerOption @relation(fields: [answerOptionId], references: [id], onDelete: Cascade)
  userAnswer     UserAnswer   @relation(fields: [userAnswerId], references: [id], onDelete: Cascade)

  @@id([userAnswerId, answerOptionId])
}

model Domain {
  id          String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String                  @unique @db.VarChar
  description String?
  createdAt   DateTime                @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime                @updatedAt @map("updated_at") @db.Timestamptz(6)
  isActice    Boolean                 @default(true) @map("is_active")
  version     String                  @default("1.0") @db.VarChar
  framework   CompetencyFramework[]
  courses     Course[]
  metrics     OrganizationalMetrics[]
  users       User[]                  @relation("UserDomain")
}

model CompetencyAspect {
  id                    String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                  String               @unique @db.VarChar
  description           String
  weightWithinDimension Decimal              @map("weight_within_dimension") @db.Decimal(3, 2)
  dimension             CompetencyDimension
  createdAt             DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime             @updatedAt @map("updated_at") @db.Timestamptz(6)
  pillarId              String               @map("pillar_id") @db.Uuid
  represent             String               @default("") @db.VarChar
  competencyPillar      CompetencyPillar     @relation(fields: [pillarId], references: [id], onDelete: Cascade)
  competencySkill       CompetencySkill[]
  courses               Course[]
  examAspectSnapshot    ExamAspectSnapshot[]
}

model ExamSet {
  id               String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name             String              @db.VarChar
  description      String?
  createdAt        DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime            @updatedAt @map("updated_at") @db.Timestamptz(6)
  assessmentType   AssessmentType      @default(SELF_ASSESSMENT) @map("assessment_type")
  frameworkId      String              @map("framework_id") @db.Uuid
  isActive         Boolean             @default(true) @map("is_active")
  isAdaptive       Boolean             @default(false) @map("is_adaptive")
  passingScore     Decimal?            @default(4) @map("passing_score") @db.Decimal(3, 2)
  timeLimitMinutes Int?                @map("time_limit_minutes") @db.SmallInt
  exam             Exam[]
  framework        CompetencyFramework @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  setQuestion      ExamSetQuestion[]
}

model Exam {
  id                   String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId               String                 @map("user_id") @db.Uuid
  examSetId            String?                @map("exam_set_id") @db.Uuid
  startedAt            DateTime?              @map("started_at") @db.Timestamptz(6)
  finishedAt           DateTime?              @map("finished_at") @db.Timestamptz(6)
  createdAt            DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime               @updatedAt @map("updated_at") @db.Timestamptz(6)
  assessmentType       AssessmentType         @default(SELF_ASSESSMENT) @map("assessment_type")
  completionPercent    Decimal?               @default(0) @map("completion_percent") @db.Decimal(3, 2)
  overallScore         Decimal?               @map("overall_score") @db.Decimal(3, 2)
  readyToWorkTier      ReadyToWorkTier?       @map("ready_to_work_tier")
  reviewerId           String?                @map("reviewer_id") @db.Uuid
  sfiaLevel            SFIALevel?             @map("sfia_level")
  timeSpentMinutes     Int?                   @map("time_spent_minutes") @db.SmallInt
  examStatus           ExamStatus             @default(IN_PROGRESS) @map("exam_status")
  examLevelId          String?                @map("exam_level_id") @db.Uuid
  assessmentSession    AssessmentSession[]
  competencyAssessment CompetencyAssessment[]
  examLevel            ExamLevel?             @relation(fields: [examLevelId], references: [id], onDelete: Cascade)
  examSet              ExamSet?               @relation(fields: [examSetId], references: [id], onDelete: Cascade)
  reviewer             User?                  @relation("ReviewerExam", fields: [reviewerId], references: [id], onDelete: Cascade)
  user                 User                   @relation("UserExam", fields: [userId], references: [id], onDelete: Cascade)
  examAspectSnapshot   ExamAspectSnapshot[]
  examPillarSnapshot   ExamPillarSnapshot[]
  InterviewRequest     InterviewRequest[]
  userAnswer           UserAnswer[]
}

model ExamSetQuestion {
  questionId String   @map("question_id") @db.Uuid
  examSetId  String   @map("exam_set_id") @db.Uuid
  orderIndex Int      @map("order_index") @db.SmallInt
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  isRequired Boolean  @default(true) @map("is_required")
  examSet    ExamSet  @relation(fields: [examSetId], references: [id], onDelete: Cascade)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)

  @@id([examSetId, questionId])
}

model Mentor {
  id               String             @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String             @unique @map("user_id") @db.Uuid
  expertise        String?            @db.VarChar
  createdAt        DateTime           @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime           @updatedAt @map("updated_at") @db.Timestamptz(6)
  isActive         Boolean            @default(true) @map("is_active")
  maxMentees       Int?               @default(5) @map("max_mentees") @db.SmallInt
  sfiaLevel        SFIALevel?         @map("sfia_level")
  user             User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookings         MentorBooking[]
  mentorCompetency MentorCompetency[]
}

model MentorCompetency {
  mentorId         String           @map("mentor_id") @db.Uuid
  sfiaLevel        SFIALevel        @map("sfia_level")
  createdAt        DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  pillarId         String           @map("pillar_id") @db.Uuid
  mentor           Mentor           @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  competencyPillar CompetencyPillar @relation(fields: [pillarId], references: [id], onDelete: Cascade)

  @@id([mentorId, pillarId])
}

model MentorBooking {
  id          String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  interviewRequestId String       @map("interview_request_id") @db.Uuid
  mentorId    String              @map("mentor_id") @db.Uuid
  status      MentorBookingStatus @default(UPCOMING)
  notes       String?             @db.Text
  pillarFocus String?             @map("competency_focus") @db.Uuid
  createdAt   DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime            @updatedAt @map("updated_at") @db.Timestamptz(6)

  mentor           Mentor            @relation(fields: [mentorId], references: [id], onDelete: Cascade)
  interviewRequest           InterviewRequest            @relation(fields: [interviewRequestId], references: [id], onDelete: Cascade)
  competencyPillar CompetencyPillar? @relation(fields: [pillarFocus], references: [id], onDelete: SetNull)
}

model InterviewRequest {
  id            String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  examId        String          @map("exam_id") @db.Uuid
  interviewDate DateTime        @map("interview_date") @db.Timestamptz(6)
  timeSlot      TimeSlotBooking @map("time_slot")
  createdAt     DateTime        @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt     DateTime        @updatedAt @map("updated_at") @db.Timestamptz(6)
  exam          Exam            @relation(fields: [examId], references: [id], onDelete: Cascade)
  MentorBooking MentorBooking[]
}

model CompetencyFramework {
  id           String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  domainId     String                 @map("domain_id") @db.Uuid
  version      String                 @default("1.0") @db.VarChar
  isActive     Boolean                @default(true) @map("is_active")
  createdAt    DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime               @updatedAt @map("updated_at") @db.Timestamptz(6)
  description  String?
  name         String                 @db.VarChar
  assessment   CompetencyAssessment[]
  domain       Domain                 @relation(fields: [domainId], references: [id], onDelete: Cascade)
  pillars      CompetencyPillar[]
  examSet      ExamSet[]
  learningPath LearningPath[]
}

model CompetencyPillar {
  id                    String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  frameworkId           String               @map("framework_id") @db.Uuid
  name                  String               @db.VarChar
  description           String?
  dimension             CompetencyDimension
  weightWithinDimension Decimal              @map("weight_within_dimension") @db.Decimal(3, 2)
  createdAt             DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime             @updatedAt @map("updated_at") @db.Timestamptz(6)
  aspects               CompetencyAspect[]
  competencyFramework   CompetencyFramework  @relation(fields: [frameworkId], references: [id], onDelete: Cascade)
  score                 CompetencyScore[]
  examPillarSnapshot    ExamPillarSnapshot[]
  pathCourse            LearningPathCourse[]
  mentorBooking         MentorBooking[]
  mentorCompetency      MentorCompetency[]
  portfolio             Portfolio[]
}

model CompetencySkill {
  id          String           @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name        String           @db.VarChar
  description String?
  sfiaLevel   SFIALevel        @map("sfia_level")
  createdAt   DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt   DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  aspectId    String           @map("aspect_id") @db.Uuid
  aspect      CompetencyAspect @relation(fields: [aspectId], references: [id], onDelete: Cascade)
  question    Question[]
}

model CompetencyAssessment {
  id                String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String              @map("user_id") @db.Uuid
  frameworkId       String              @map("framework_id") @db.Uuid
  examId            String?             @map("exam_id") @db.Uuid
  assessorId        String?             @map("assessor_id") @db.Uuid
  mindsetScore      Decimal             @map("mindset_score") @db.Decimal(3, 2)
  skillsetScore     Decimal             @map("skillset_score") @db.Decimal(3, 2)
  toolsetScore      Decimal             @map("toolset_score") @db.Decimal(3, 2)
  overallScore      Decimal             @map("overall_score") @db.Decimal(3, 2)
  sfiaLevel         SFIALevel           @map("sfia_level")
  readyToWorkTier   ReadyToWorkTier?    @map("ready_to_work_tier")
  certificationDate DateTime?           @map("certification_date")
  expiryDate        DateTime?           @map("expiry_date")
  assessmentType    AssessmentType      @map("assessment_type")
  isCurrent         Boolean             @default(true) @map("is_current")
  createdAt         DateTime            @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime            @updatedAt @map("updated_at") @db.Timestamptz(6)
  assessor          User?               @relation("AssessorAssessment", fields: [assessorId], references: [id], onDelete: Cascade)
  exam              Exam?               @relation(fields: [examId], references: [id])
  framework         CompetencyFramework @relation(fields: [frameworkId], references: [id])
  user              User                @relation("UserAssessment", fields: [userId], references: [id], onDelete: Cascade)
  score             CompetencyScore[]
}

model CompetencyScore {
  id            String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  assessmentId  String               @map("assessment_id") @db.Uuid
  sfiaLevel     SFIALevel            @map("sfia_level")
  evidenceCount Int?                 @default(0) @map("evidence_count") @db.SmallInt
  createdAt     DateTime             @default(now()) @map("created_at") @db.Timestamptz(6)
  pillarId      String               @map("pillar_id") @db.Uuid
  assessment    CompetencyAssessment @relation(fields: [assessmentId], references: [id])
  pillar        CompetencyPillar     @relation(fields: [pillarId], references: [id])
}

model ExamPillarSnapshot {
  examId    String           @map("exam_id") @db.Uuid
  pillarId  String           @map("pillar_id") @db.Uuid
  score     Decimal          @map("mindset_score") @db.Decimal(3, 2)
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  exam      Exam             @relation(fields: [examId], references: [id], onDelete: Cascade)
  pillar    CompetencyPillar @relation(fields: [pillarId], references: [id], onDelete: Cascade)

  @@id([examId, pillarId])
}

model ExamAspectSnapshot {
  examId    String           @map("exam_id") @db.Uuid
  aspectId  String           @map("aspect_id") @db.Uuid
  score     Decimal          @map("mindset_score") @db.Decimal(3, 2)
  createdAt DateTime         @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime         @updatedAt @map("updated_at") @db.Timestamptz(6)
  aspect    CompetencyAspect @relation(fields: [aspectId], references: [id], onDelete: Cascade)
  exam      Exam             @relation(fields: [examId], references: [id], onDelete: Cascade)

  @@id([examId, aspectId])
}

model LearningPath {
  id                     String                 @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                 String                 @map("user_id") @db.Uuid
  frameworkId            String                 @map("framework_id") @db.Uuid
  name                   String                 @db.VarChar
  description            String?
  targetSfiaLevel        SFIALevel              @map("target_sfia_level")
  estimatedDurationWeeks Int?                   @map("estimated_duration_weeks") @db.SmallInt
  isActive               Boolean                @default(true) @map("is_active")
  generatedAt            DateTime               @default(now()) @map("generated_at") @db.Timestamptz(6)
  createdAt              DateTime               @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt              DateTime               @updatedAt @map("updated_at") @db.Timestamptz(6)
  framework              CompetencyFramework    @relation(fields: [frameworkId], references: [id])
  user                   User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  learningPathCourse     LearningPathCourse[]
  userProgress           UserLearningProgress[]
}

model LearningPathCourse {
  learningPathId String            @map("learning_path_id") @db.Uuid
  courseId       String            @map("course_id") @db.Uuid
  orderIndex     Int               @map("order_index") @db.SmallInt
  isRequired     Boolean           @default(true) @map("is_required")
  createdAt      DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  pillarId       String?           @map("pillar_id") @db.Uuid
  course         Course            @relation(fields: [courseId], references: [id], onDelete: Cascade)
  learningPath   LearningPath      @relation(fields: [learningPathId], references: [id], onDelete: Cascade)
  pillar         CompetencyPillar? @relation(fields: [pillarId], references: [id])

  @@id([learningPathId, courseId])
}

model UserLearningProgress {
  id                 String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String         @map("user_id") @db.Uuid
  courseId           String         @map("course_id") @db.Uuid
  learningPathId     String?        @map("learning_path_id") @db.Uuid
  status             LearningStatus @default(NOT_STARTED)
  progressPercentage Decimal?       @default(0) @map("progress_percentage") @db.Decimal(3, 2)
  startedAt          DateTime?      @map("started_at") @db.Timestamptz(6)
  completedAt        DateTime?      @map("completed_at") @db.Timestamptz(6)
  timeSpentHours     Decimal?       @default(0) @map("time_spent_hours") @db.Decimal(5, 2)
  rating             Int?           @db.SmallInt
  feedback           String?
  createdAt          DateTime       @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt          DateTime       @updatedAt @map("updated_at") @db.Timestamptz(6)
  course             Course         @relation(fields: [courseId], references: [id], onDelete: Cascade)
  learningPath       LearningPath?  @relation(fields: [learningPathId], references: [id])
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Portfolio {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String            @unique @map("user_id") @db.Uuid
  linkedInUrl      String?           @map("linked_in_url")
  githubUrl        String?           @map("github_url")
  sfiaLevelClaimed SFIALevel?        @map("sfia_level_claimed")
  isVerified       Boolean           @default(false) @map("is_verified")
  verifiedBy       String?           @map("verified_by") @db.Uuid
  verifiedAt       DateTime?         @map("verified_at")
  createdAt        DateTime          @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime          @updatedAt @map("updated_at") @db.Timestamptz(6)
  certificateFiles String[]          @default([])
  experienceFiles  String[]          @default([])
  pillarId         String?           @map("pillar_id") @db.Uuid
  pillar           CompetencyPillar? @relation(fields: [pillarId], references: [id])
  user             User              @relation("UserPortfolio", fields: [userId], references: [id])
  verifier         User?             @relation("VerifierPortfolio", fields: [verifiedBy], references: [id])
}

model OrganizationalMetrics {
  id               String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  domainId         String   @map("domain_id") @db.Uuid
  metricDate       DateTime @map("metricDate") @db.Timestamptz(6)
  totalUsers       Int      @map("total_users") @db.SmallInt
  assessedUsers    Int      @map("assessed_users") @db.SmallInt
  avgOverallScore  Decimal? @map("avg_overall_score") @db.Decimal(3, 2)
  avgMindsetScore  Decimal? @map("avg_mindset_score") @db.Decimal(3, 2)
  avgSkillsetScore Decimal? @map("avg_skillset_score") @db.Decimal(3, 2)
  avgToolsetScore  Decimal? @map("avg_toolset_score") @db.Decimal(3, 2)
  readyToWorkCount Int?     @default(0) @map("ready_to_work_count") @db.SmallInt
  tier1Count       Int?     @default(0) @map("tier_1_count") @db.SmallInt
  tier2Count       Int?     @default(0) @map("tier_2_count") @db.SmallInt
  tier3Count       Int?     @default(0) @map("tier_3_count") @db.SmallInt
  createdAt        DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt        DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  domain           Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
}

model AssessmentSession {
  id                   String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  examId               String   @map("exam_id") @db.Uuid
  sessionData          Json?    @map("session_data")
  lastQuestionIndex    Int?     @default(0) @map("last_question_index") @db.SmallInt
  timeRemainingSeconds Int?     @map("time_remaining_seconds") @db.SmallInt
  isPaused             Boolean  @default(false) @map("is_paused")
  browserInfo          String?  @map("browser_info")
  ip_address           String?  @map("ip_address") @db.Inet
  createdAt            DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)
  exam                 Exam     @relation(fields: [examId], references: [id])
}

model ExamLevel {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  examLevel    ExamLevelEnum @map("exam_level")
  name         String        @unique @db.VarChar
  description  String
  createdAt    DateTime      @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime      @updatedAt @map("updated_at") @db.Timestamptz(6)
  learningPath String?       @map("learning_path")
  exams        Exam[]
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  TRUE_FALSE
  ESSAY
}

enum MentorBookingStatus {
  UPCOMING 
  COMPLETED 
  NOT_JOINED 
}

enum CognitiveLoad {
  LOW
  MEDIUM
  HIGH
}

enum UserAnswerStatus {
  DRAFT
  SUBMIT
}

enum ExamStatus {
  IN_PROGRESS
  SUBMITTED
  WAITING_FOR_REVIEW
  GRADED
  INTERVIEW_SCHEDULED
  INTERVIEW_COMPLETED
  RESULT_EVALUATED
}

enum AssessmentType {
  SELF_ASSESSMENT
  PEER_REVIEW
  MANAGER_REVIEW
  PRACTICAL_SKILLS
  PORTFOLIO_REVIEW
  COMPREHENSIVE
}

enum SFIALevel {
  LEVEL_1_AWARENESS
  LEVEL_2_FOUNDATION
  LEVEL_3_APPLICATION
  LEVEL_4_INTEGRATION
  LEVEL_5_INNOVATION
  LEVEL_6_LEADERSHIP
  LEVEL_7_MASTERY
}

enum ExamLevelEnum {
  LEVEL_1_STARTER
  LEVEL_2_EXPLORER
  LEVEL_3_PRACTITIONER
  LEVEL_4_INTEGRATOR
  LEVEL_5_STRATEGIST
  LEVEL_6_LEADER
  LEVEL_7_EXPERT
}

enum ReadyToWorkTier {
  TIER_1_PRODUCTION
  TIER_2_TEAM
  TIER_3_MENTORED
  NOT_READY
}

enum TimeSlotBooking {
  AM_08_09
  AM_09_10
  AM_10_11
  AM_11_12
  PM_02_03
  PM_03_04
  PM_04_05
  PM_05_06
}

enum CompetencyDimension {
  MINDSET
  SKILLSET
  TOOLSET
}

enum LearningStatus {
  NOT_STARTED
  IN_PROGRESS
  COMPLETED
  PAUSED
}

enum UserTrackingStatus {
  REGISTERED
  ACTIVATED
  PROFILE_PENDING
  PROFILE_COMPLETED
}

enum TestTrackingStatus {
  TEST_STARTED
  IN_PROGRESS
  SUBMITTED
  INTERVIEW_SCHEDULED
  INTERVIEW_COMPLETED
  RESULT_EVALUATED
}

enum SlotStatus {
  AVAILABLE
  ALMOST_FULL
  FULL
}
